
name: Docker Image

# Generate a new production image when there is a release or a release is published
#   Also generate a production image whenever there is a push to the master branch.
on:
  push:
    branches: master #'**'
    tags: 'v*.*.*'

jobs:
  generate-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    -
      name: Setup QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - 
      name: Get Build Context
      uses: actions/checkout@v2
    -
      name: Determine Image Tags
      id: generate_tag
      run: |
        _repo="ldmx/pro"
        _tag=""
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # if pushing a git tag ==> get the git tag for the docker tag
          _tag=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          # pushing to a branch ==> docker tag is branch name
          #   if branch name is default_branch
          #     docker tag is edge
          _tag=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$_tag" ]; then
            _tag=edge
          fi
        fi
        _push_tags="${_repo}:${_tag}"
        if [[ $_tag =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          # latest docker tag is latest release version built matching the format 
          #   v<1-3 digits>.<1-3 digits>.<1-3 digits>
          _push_tags="$_push_tags,${_repo}:latest"
        fi
        if [ "${{ github.event.repository.default_branch }}" = "${GITHUB_REF#refs/heads/}" ]; then
          # on pushes to default branch, tag with sha of GITHUB as well
          _push_tags="$_push_tags,${_repo}:sha-${GITHUB_SHA::8}"
        fi
        echo "Generated Tags: ${_push_tags}"
        echo ::set-output name=push_tags::${_push_tags}
    -
      name: Build the Image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        tags: ${{ steps.generate_tag.outputs.push_tags }}
        push: true

